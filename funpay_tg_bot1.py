# bot_email_only_mx.py
import json
import sqlite3
import random
import re
from pathlib import Path
from typing import Dict, Any
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import dns.resolver   # MX-–ø—Ä–æ–≤–µ—Ä–∫–∞

from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, ConversationHandler, filters
)

# =================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===================
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

# Telegram bot
BOT_TOKEN = os.getenv("BOT_TOKEN")

# SMTP
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_LOGIN = os.getenv("SMTP_LOGIN")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
EMAIL_FROM = os.getenv("EMAIL_FROM")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
SUPPORT_CHAT_ID = int(os.getenv("SUPPORT_CHAT_ID", "0"))
REVIEWS_CHAT_LINK = os.getenv("REVIEWS_CHAT_LINK", "https://t.me/")


DATA_FILE = Path("data.json")
# =================================================

# Conversation states
ASK_EMAIL, ASK_EMAIL_CODE = range(2)
back_keyboard = ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)

# Default data (—É—Å–ª—É–≥–∏ –∏ —Ç.–¥.)
DEFAULT_DATA = {
    "services": [
        {"id": 1, "title": "–±–µ–ª—ã–µ —Ç–µ–º–∫–∏ ", "price": "25—Ç–≥ –∑–≤–µ–∑–¥", "desc": "–ø—Ä–∏–º"},
        {"id": 2, "title": "—Ç–µ–º–Ω—ã–µ —Ç–µ–º–∫–∏", "price": "100—Ç–≥ –∑–≤–µ–∑–¥", "desc": "–ø—Ä–∏–º"},
        {"id": 3, "title": "–§–µ—Ä–º—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤,–≤–∞–ª—é—Ç –∏ —Ç–¥", "price": "275 —Ç–≥ –∑–≤–µ–∑–¥", "desc": "–ø—Ä–∏–º"},
        {"id": 4, "title": "Steam-–§–ü", "price": "300", "desc":"–ø—Ä–∏–º"},
        {"id": 5, "title": "—É–Ω–∏–∫1", "price": "225", "desc":"–ø—Ä–∏–º"},
        {"id": 6, "title": "—É–Ω–∏–∫2", "price": "300", "desc":"–ø—Ä–∏–º"},
    ],
    "reviews": [],
    "orders": [],
}
START_TEXT = (
    "–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–∞–±–ª–æ –ø–æ –≥–∞–π–¥—É –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ñ–∞–Ω–ø–µ–µ\n\n"
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª—É–≥–∞–º–∏, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ F.A.Q, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:"
)

FAQ_TEXT = (
    "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚Üí –Ω–∞–∂–º–∏—Ç–µ –ó–∞–∫–∞–∑–∞—Ç—å.\n\n"
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?\n‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ @mountideWW.\n"
)

SUPPORT_TEXT = (
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @mountideWW\n\n"
)
# ---- Database helpers ----
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER UNIQUE,
            username TEXT,
            email TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS email_confirmations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            email TEXT,
            code TEXT,
            confirmed INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            username TEXT,
            service_id INTEGER,
            service_title TEXT,
            price TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    conn.commit()
    conn.close()

def save_user(chat_id: int, username: str):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR IGNORE INTO users (chat_id, username, email)
        VALUES (?, ?, ?)
    """, (chat_id, username, None))
    conn.commit()
    conn.close()

# ---- JSON data ----
def load_data() -> Dict[str, Any]:
    if not DATA_FILE.exists():
        save_data(DEFAULT_DATA)
        return DEFAULT_DATA.copy()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ---- Email sending ----
def send_email_code(email: str, code: str) -> bool:
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_FROM
        msg["To"] = email
        msg["Subject"] = "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        body = f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}"
        msg.attach(MIMEText(body, "plain"))

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_LOGIN, SMTP_PASSWORD)
        server.sendmail(EMAIL_FROM, email, msg.as_string())
        server.quit()
        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", e)
        return False

# ---- Email validation ----
EMAIL_RE = re.compile(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)")

def is_valid_email_format(email: str) -> bool:
    return bool(EMAIL_RE.match(email.strip()))

def has_mx_record(email: str) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ MX-–∑–∞–ø–∏—Å–∏ –¥–æ–º–µ–Ω–∞ """
    domain = email.split("@")[-1]
    try:
        answers = dns.resolver.resolve(domain, "MX")
        return len(answers) > 0
    except Exception:
        return False

# ---- Keyboards / menus ----
def main_menu():
    kb = [
        [InlineKeyboardButton("1. –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("2. F.A.Q", callback_data="faq")],
        [InlineKeyboardButton("3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("4. –û—Ç–∑—ã–≤—ã", url=REVIEWS_CHAT_LINK)],  # —Å—Ä–∞–∑—É —Å—Å—ã–ª–∫–∞
    ]
    return InlineKeyboardMarkup(kb)


def services_menu(store):
    kb = [[InlineKeyboardButton(f"{s['title']} ‚Äî {s['price']}", callback_data=f"service_{s['id']}")] for s in store["services"]]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(kb)

# ---- Handlers ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "NoUsername"
    save_user(chat_id, username)
    await update.message.reply_text(START_TEXT, reply_markup=main_menu())

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    store = load_data()

    if data == "services":
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_menu(store))
        return

    if data.startswith("service_"):
        sid = int(data.split("_")[1])
        s = next((x for x in store["services"] if x["id"] == sid), None)
        if not s:
            await query.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        text = f"{s['title']} ‚Äî {s['price']}\n\n{s['desc']}"
        kb = [
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{sid}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="services")],
        ]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))
        return

    if data.startswith("order_"):
        sid = int(data.split("_")[1])
        s = next((x for x in store["services"] if x["id"] == sid), None)
        if not s:
            await query.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        chat_id = query.from_user.id
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT email FROM users WHERE chat_id = ?", (chat_id,))
        row = cursor.fetchone()
        conn.close()

        if not row or not row[0]:
            text = (
                "‚úçÔ∏è –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—á—Ç—ã.\n\n"
                "üìß –í–≤–µ–¥–∏ —Å–≤–æ–π E-mail /setemail"
            )
            kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="services")]]
            await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        order = {
            "user_id": query.from_user.id,
            "user_name": query.from_user.full_name,
            "service": s
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO orders (chat_id, username, service_id, service_title, price)
            VALUES (?, ?, ?, ?, ?)
        """, (
            query.from_user.id,
            query.from_user.full_name,
            s["id"],
            s["title"],
            s["price"]
        ))
        conn.commit()
        conn.close()

        data_store = load_data()
        data_store["orders"].append(order)
        save_data(data_store)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]]
        await query.message.edit_text(
            f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:\n"
            f"{s['title']} ‚Äî {s['price']}\n"
            f"–û—Ç–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @mountideWW –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(kb)
        )

        # ‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query.from_user.full_name} (@{query.from_user.username})\n"
                 f"üÜî ChatID: {query.from_user.id}\n"
                 f"üìß Email: {row[0]}\n"
                 f"üõí –£—Å–ª—É–≥–∞: {s['title']} ‚Äî {s['price']}"
        )


        # ‚ö°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query.from_user.full_name} (@{query.from_user.username})\n"
                 f"üÜî ChatID: {query.from_user.id}\n"
                 f"üìß Email: {row[0]}\n"
                 f"üõí –£—Å–ª—É–≥–∞: {s['title']} ‚Äî {s['price']}"
        )
        return


    if data == "faq":
        await query.message.edit_text(FAQ_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))
        return

    if data == "support":
        await query.message.edit_text(SUPPORT_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))
        return

    if data == "reviews":
        reviews = store.get("reviews", [])
        if not reviews:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤ –Ω–∞—à–µ–º Telegram-—á–∞—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:"
        else:
            parts = [f"‚Äî {r['user_name']}: {r['text']}" for r in reviews[-10:]]
            text = "–û—Ç–∑—ã–≤—ã:\n\n" + "\n\n".join(parts)
        kb = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Ç–∑—ã–≤—ã", url=REVIEWS_CHAT_LINK)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))
        return

    if data == "back":
        await query.message.edit_text(START_TEXT, reply_markup=main_menu())
        return

    await query.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# ---- Email verification flow ----
async def setemail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:", reply_markup=ReplyKeyboardRemove())
    return ASK_EMAIL

async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()
    chat_id = update.effective_chat.id

    if not is_valid_email_format(email) or not has_mx_record(email):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã (–ø—Ä–∏–º–µ—Ä: user@gmail.com):", reply_markup=ReplyKeyboardRemove())
        return ASK_EMAIL

    code = str(random.randint(1000, 9999))

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM email_confirmations WHERE chat_id = ?", (chat_id,))
    cursor.execute("INSERT INTO email_confirmations (chat_id, email, code, confirmed) VALUES (?, ?, ?, 0)", (chat_id, email, code))
    conn.commit()
    conn.close()

    if send_email_code(email, code):
        await update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:", reply_markup=back_keyboard)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP.", reply_markup=ReplyKeyboardRemove())

    return ASK_EMAIL_CODE

async def ask_email_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    chat_id = update.effective_chat.id

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT email, code FROM email_confirmations WHERE chat_id = ? AND confirmed = 0", (chat_id,))
    row = cursor.fetchone()

    if row and row[1] == text:
        email = row[0]
        cursor.execute("UPDATE email_confirmations SET confirmed = 1 WHERE chat_id = ?", (chat_id,))
        cursor.execute("INSERT OR REPLACE INTO users (chat_id, username, email) VALUES (?, COALESCE((SELECT username FROM users WHERE chat_id = ?), ?), ?)",
                       (chat_id, chat_id, update.effective_user.username or "NoUsername", email))
        conn.commit()
        conn.close()

        store = load_data()
        await update.message.reply_text("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_menu(store))
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /setemail", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END

# ---- Cancel ----
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ---- Fallback handlers ----
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –Ω–∞ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é ")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏!")

# ---- Run bot ----
def main():
    if BOT_TOKEN == "" or SMTP_LOGIN == "" or SMTP_PASSWORD == "":
        print("–ó–∞–ø–æ–ª–Ω–∏ BOT_TOKEN, SMTP_LOGIN –∏ SMTP_PASSWORD –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.")
        return

    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))

    email_conv = ConversationHandler(
        entry_points=[CommandHandler("setemail", setemail)],
        states={
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            ASK_EMAIL_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(email_conv)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()

if __name__ == "__main__":
    main()
